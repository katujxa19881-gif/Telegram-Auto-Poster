// scripts/cron_poster.js ‚Äî Zero-deps –∞–≤—Ç–æ–ø–æ—Å—Ç–µ—Ä —Å –¥–æ–≥–æ–Ω—è–ª–∫–æ–π, —Ç–∞–π–º–∑–æ–Ω–æ–π –∏ —Ä–µ–∂–∏–º–æ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
// –†–µ–∂–∏–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: NOTIFY_MODE=every | summary | silent
// - every: –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –Ω–∞ –∫–∞–∂–¥–æ–º –ø—Ä–æ–≥–æ–Ω–µ, –µ—Å–ª–∏ –≤ –æ–∫–Ω–µ –±—ã–ª –ø–æ—Å—Ç –∏ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª—Å—è
// - summary: —Ç–æ–ª—å–∫–æ –≤–µ—á–µ—Ä–Ω—è—è —Å–≤–æ–¥–∫–∞ –æ–¥–∏–Ω —Ä–∞–∑ –≤ –¥–µ–Ω—å (—á–∞—Å –∑–∞–¥–∞—ë—Ç—Å—è DAILY_REPORT_HOUR)
// - silent: –Ω–∏–∫–∞–∫–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ –õ–°
//
// –§–∏—á–∏: CSV –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π, photo/video, 8 custom-buttons, fallback-–∫–Ω–æ–ø–∫–∏,
// Replit keepalive, –∞–Ω—Ç–∏–¥—É–±–ª–∏, catch-up + lead window, —É–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –¥–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞.

import fs from "fs";
import https from "https";

/* ================== ENV ================== */
const BOT_TOKEN = process.env.BOT_TOKEN;
const CHANNEL_ID = process.env.CHANNEL_ID;
const OWNER_ID = process.env.OWNER_ID || "";
const TZ = process.env.TZ || "Europe/Kaliningrad";

// –û–∫–Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:
const CATCHUP_MINUTES = parseInt(process.env.CATCHUP_MINUTES || "120", 10); // —Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥ –¥–æ–≥–æ–Ω—è–µ–º
const LEAD_MINUTES = parseInt(process.env.LEAD_MINUTES || "15", 10); // –Ω–∞ —Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –≤–ø–µ—Ä—ë–¥ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å

// –†–µ–∂–∏–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
const NOTIFY_MODE = (process.env.NOTIFY_MODE || "summary").toLowerCase(); // every | summary | silent
const DAILY_REPORT_HOUR = parseInt(process.env.DAILY_REPORT_HOUR || "21", 10); // —á–∞—Å –¥–Ω—è –¥–ª—è —Å–≤–æ–¥–∫–∏ (–ø–æ TZ)

// –°—Å—ã–ª–∫–∏/keepalive (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
const KEEPALIVE_URL = process.env.KEEPALIVE_URL || "";
const LINK_SKILLS = process.env.LINK_SKILLS || "";
const LINK_PRICES = process.env.LINK_PRICES || "";
const LINK_FEEDBACK = process.env.LINK_FEEDBACK || "";
const LINK_ORDER = process.env.LINK_ORDER || "https://t.me/Ka_terina8";

const CSV_PATH = "avtopost.csv";
const SENT_FILE = "sent.json";
const STATS_FILE = "stats.json"; // –¥–ª—è –¥–Ω–µ–≤–Ω–æ–π —Å–≤–æ–¥–∫–∏

if (!BOT_TOKEN || !CHANNEL_ID) {
  console.error("‚ùå Missing BOT_TOKEN or CHANNEL_ID");
  process.exit(1);
}

/* ============== Telegram API ============== */
function tgRequest(path, payload) {
  const data = payload ? JSON.stringify(payload) : null;
  const opts = {
    hostname: "api.telegram.org",
    path,
    method: data ? "POST" : "GET",
    headers: data ? { "Content-Type": "application/json", "Content-Length": Buffer.byteLength(data) } : {},
  };
  return new Promise((resolve) => {
    const req = https.request(opts, (res) => {
      let buf = "";
      res.on("data", (c) => (buf += c));
      res.on("end", () => {
        try { resolve(JSON.parse(buf || "{}")); } catch { resolve({ ok:false, description:"Bad JSON" }); }
      });
    });
    req.on("error", () => resolve({ ok:false, description:"Network error" }));
    if (data) req.write(data);
    req.end();
  });
}
async function tgSendMessage(chat_id, text, extra = {}) { await tgRequest(`/bot${BOT_TOKEN}/sendMessage`, { chat_id, text, ...extra }); }
async function tgSendPhoto(chat_id, photo, caption, extra = {}) { await tgRequest(`/bot${BOT_TOKEN}/sendPhoto`, { chat_id, photo, caption, ...extra }); }
async function tgSendVideo(chat_id, video, caption, extra = {}) { await tgRequest(`/bot${BOT_TOKEN}/sendVideo`, { chat_id, video, caption, ...extra }); }
async function tgGetMe() { const r = await tgRequest(`/bot${BOT_TOKEN}/getMe`); return (r?.ok && r?.result?.username) ? r.result.username : ""; }

/* ================= Utils ================= */
function nowInTZ() { return new Date(new Date().toLocaleString("en-US", { timeZone: TZ })); }
function normalizeTime(t) {
  if (!t) return "00:00";
  let [h="0", m="0"] = String(t).split(":");
  h = /^\d+$/.test(h) ? h.padStart(2,"0") : "00";
  m = /^\d+$/.test(m) ? m.padStart(2,"0") : "00";
  return `${h}:${m}`;
}
function short(s, n=160){ return String(s||"").replace(/\s+/g," ").slice(0,n); }

// Replit keepalive check
function checkBotLive(url, timeoutMs=3000){
  if (!url) return Promise.resolve(false);
  return new Promise((resolve)=>{
    const req = https.get(url, (res)=>{
      let buf=""; res.on("data",(c)=>buf+=c);
      res.on("end",()=>resolve(buf.trim().toLowerCase()==="ok"));
    });
    req.on("error",()=>resolve(false));
    req.setTimeout(timeoutMs, ()=>{ req.destroy(); resolve(false); });
  });
}

// Google Drive ‚Üí –ø—Ä—è–º–æ–π URL
function extractDriveId(url=""){
  try{
    const u = new URL(url);
    if (!u.hostname.includes("drive.google.com")) return null;
    const m1 = u.pathname.match(/\/file\/d\/([A-Za-z0-9_-]{10,})/); if (m1) return m1[1];
    const id2 = u.searchParams.get("id"); if (id2) return id2;
    if (u.pathname.startsWith("/uc")) return u.searchParams.get("id");
    return null;
  }catch{ return null; }
}
function convertDriveUrl(url=""){ const id=extractDriveId(url); return id ? `https://drive.google.com/uc?export=download&id=${id}` : url; }

/* ================= CSV (—Ç–æ–ª—Å—Ç—ã–π –ø–∞—Ä—Å–µ—Ä) ================== */
// –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç:
// - –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–µ —è—á–µ–π–∫–∏ (–≤ –∫–∞–≤—ã—á–∫–∞—Ö),
// - —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–≤—ã—á–µ–∫ "" –≤–Ω—É—Ç—Ä–∏ –∫–∞–≤—ã—á–µ–∫,
// - –≤—ã–±–æ—Ä —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è , –∏–ª–∏ ; –ø–æ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ (–≤–Ω–µ –∫–∞–≤—ã—á–µ–∫),
// - –∞–ª–∏–∞—Å—ã photo/video, –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é Google Drive —Å—Å—ã–ª–æ–∫,
// - \n –≤ —Ç–µ–∫—Å—Ç–µ (–∏ —Ä–µ–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫).

function detectSepFromHeader(src) {
  // —á–∏—Ç–∞–µ–º –¥–æ –ø–µ—Ä–≤–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞ —Å—Ç—Ä–æ–∫–∏ –≤–Ω–µ –∫–∞–≤—ã—á–µ–∫ –∏ —Å—á–∏—Ç–∞–µ–º , –∏ ;
  let inQ = false;
  let commas = 0, semis = 0;
  for (let i = 0; i < src.length; i++) {
    const ch = src[i];
    if (ch === '"') {
      if (inQ && src[i + 1] === '"') { i++; /* escaped quote */ }
      else inQ = !inQ;
    } else if (!inQ && (ch === '\n')) {
      break;
    } else if (!inQ && ch === ',') commas++;
    else if (!inQ && ch === ';') semis++;
  }
  return semis > commas ? ';' : ',';
}

function parseCSV(srcPath) {
  let s = fs.readFileSync(srcPath, "utf8");
  // –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã –∏ —É–±–∏—Ä–∞–µ–º BOM
  s = s.replace(/^\uFEFF/, "").replace(/\r\n/g, "\n").replace(/\r/g, "\n");
  if (!s.trim()) return { rows: [], sep: "," };

  const sep = detectSepFromHeader(s);

  // –†–∞–∑–±–∏—Ä–∞–µ–º –≤–µ—Å—å —Ñ–∞–π–ª –ø–æ—Å–∏–º–≤–æ–ª—å–Ω–æ
  const records = [];
  let row = [];
  let field = "";
  let inQ = false;

  for (let i = 0; i < s.length; i++) {
    const ch = s[i];

    if (ch === '"') {
      // —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–∞–≤—ã—á–∫–∞ "" ‚Üí "
      if (inQ && s[i + 1] === '"') { field += '"'; i++; }
      else inQ = !inQ;
      continue;
    }

    if (!inQ && ch === sep) {
      row.push(field);
      field = "";
      continue;
    }

    if (!inQ && ch === '\n') {
      row.push(field);
      field = "";
      // –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é
      if (row.some(c => String(c).trim() !== "")) {
        records.push(row);
      }
      row = [];
      continue;
    }

    field += ch;
  }

  // –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ö–≤–æ—Å—Ç—ã
  if (field.length > 0 || row.length > 0) {
    row.push(field);
    if (row.some(c => String(c).trim() !== "")) records.push(row);
  }

  if (records.length === 0) return { rows: [], sep };

  const headers = records[0].map(h => String(h || "").trim());
  const dataRows = records.slice(1);

  const rows = [];
  for (const rec of dataRows) {
    const obj = {};
    for (let i = 0; i < headers.length; i++) {
      const h = headers[i];
      const v = (rec[i] ?? "").toString();
      obj[h] = v;
    }

    // –∞–ª–∏–∞—Å—ã
    if (!obj.photo_url && obj.photo) obj.photo_url = obj.photo;
    if (!obj.video_url && obj.video) obj.video_url = obj.video;

    // Google Drive ‚Üí –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É
    if (obj.photo_url) obj.photo_url = convertDriveUrl(obj.photo_url.trim());
    if (obj.video_url) obj.video_url = convertDriveUrl(obj.video_url.trim());

    // –ø–æ–¥–¥–µ—Ä–∂–∫–∞ \n –∫–∞–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ª–∏—Ç–µ—Ä–∞–ª–∞ + —Ä–µ–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–Ω–æ—Å—ã —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã
    if (obj.text) obj.text = obj.text.replace(/\\n/g, "\n");

    // –ø—Ä–æ–ø—É—Å–∫ –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫
    const meaningful = Object.values(obj).some(v => String(v).trim() !== "");
    if (meaningful) rows.push(obj);
  }

  return { rows, sep };
}

/* ============= Keyboards ============= */
function customButtonsFromRow(r){
  const res=[]; for(let i=1;i<=8;i++){
    const t=(r[`btn${i}_text`]||"").trim(), u=(r[`btn${i}_url`]||"").trim();
    if(!t||!u) continue;
    try{ new URL(u); res.push({text:t, url:u}); }catch{}
  }
  return res;
}
function packRows(btns, perRow=2){ const rows=[]; for(let i=0;i<btns.length;i+=perRow) rows.push(btns.slice(i,i+perRow)); return rows; }

function buildFallbackKeyboardAlways(){
  const ext=[];
  if (LINK_SKILLS) ext.push({text:"üß† –ß—Ç–æ —É–º–µ–µ—Ç?", url: LINK_SKILLS});
  if (LINK_PRICES) ext.push({text:"üí∞ –¶–µ–Ω—ã", url: LINK_PRICES});
  if (LINK_FEEDBACK) ext.push({text:"üí¨ –û—Ç–∑—ã–≤—ã", url: LINK_FEEDBACK});
  const orderBtn = {text:"üìù –ó–∞–∫–∞–∑–∞—Ç—å", url: LINK_ORDER};
  const rows=[], base=[...ext, orderBtn];
  for (let i=0;i<base.length;i+=2) rows.push(base.slice(i,i+2));
  return rows;
}

async function buildKeyboard(r, botUsername, botLive){
  const custom = customButtonsFromRow(r);
  if (custom.length) return { reply_markup:{ inline_keyboard: packRows(custom,2) } };
  const rows = buildFallbackKeyboardAlways();
  if (botLive && botUsername){
    rows.push([{ text:"ü§ñ –û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç", url:`https://t.me/${botUsername}?start=hello` }]);
  }
  return { reply_markup:{ inline_keyboard: rows } };
}

/* ============= Anti-duplicate ============= */
let sentSet = new Set();
try { if (fs.existsSync(SENT_FILE)) sentSet = new Set(JSON.parse(fs.readFileSync(SENT_FILE,"utf8"))); } catch {}
function saveSent(){ fs.writeFileSync(SENT_FILE, JSON.stringify([...sentSet], null, 2)); }
function sentKey({date,time,channel,text,photo_url,video_url}){
  const payload = `${date}|${time}|${channel}|${text||""}|${photo_url||""}|${video_url||""}`;
  return Buffer.from(payload).toString("base64").slice(0,32);
}

/* ============= Daily stats for summary ============= */
function loadStats(){
  try{ if (fs.existsSync(STATS_FILE)) return JSON.parse(fs.readFileSync(STATS_FILE,"utf8")); }
  catch{}
  return {};
}
function saveStats(obj){ fs.writeFileSync(STATS_FILE, JSON.stringify(obj, null, 2)); }

/* ================== MAIN ================== */
(async () => {
  try{
    const { rows, sep } = parseCSV(CSV_PATH);
    console.log(`CSV: ${CSV_PATH}, sep="${sep}", rows=${rows.length}`);
    if (rows.length===0){
      if (OWNER_ID && NOTIFY_MODE==="every"){
        await tgSendMessage(OWNER_ID,"‚ö†Ô∏è CSV –ø—É—Å—Ç ‚Äî –Ω–µ—Ç —Å—Ç—Ä–æ–∫.");
      }
      return;
    }

    const now = nowInTZ();
    const todayStr = now.toISOString().slice(0,10);
    const hourNow = now.getHours();

    // –æ–∫–Ω–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: [now - CATCHUP; now + LEAD]
    const windowStart = new Date(now.getTime() - CATCHUP_MINUTES*60000);
    const windowEnd = new Date(now.getTime() + LEAD_MINUTES*60000);

    const botLive = await checkBotLive(KEEPALIVE_URL);
    const botUsername = botLive ? (await tgGetMe()) : "";

    let dueToday=0, dueInWindow=0, sentCount=0;

    for (const r of rows){
      const date=(r.date||"").trim();
      const time=normalizeTime(r.time||"");
      const text=r.text||"";
      const channel=(r.channel_id||"").trim() || CHANNEL_ID;
      const photo_url=(r.photo_url||"").trim();
      const video_url=(r.video_url||"").trim();
      if (!date || !time || !text) continue;

      const dt = new Date(`${date}T${time}:00`);
      if (isNaN(dt)) continue;

      // —É—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ "—Å–µ–≥–æ–¥–Ω—è"
      if (dt.toISOString().slice(0,10) !== todayStr) continue;

      dueToday++;

      if (dt >= windowStart && dt <= windowEnd) {
        dueInWindow++;
        const key = sentKey({date,time,channel,text,photo_url,video_url});
        if (sentSet.has(key)) continue;

        const keyboard = await buildKeyboard(r, botUsername, botLive);
        if (video_url) await tgSendVideo(channel, video_url, text, keyboard);
        else if (photo_url) await tgSendPhoto(channel, photo_url, text, keyboard);
        else await tgSendMessage(channel, text, keyboard);

        sentSet.add(key); sentCount++;

        // —Ö–æ—Ç–∏–º/–Ω–µ —Ö–æ—Ç–∏–º –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω—ã–π –æ—Ç—á—ë—Ç –æ–± –æ—Ç–ø—Ä–∞–≤–∫–µ ‚Äî –æ—Å—Ç–∞–≤–∏–º –≤—Å–µ–≥–¥–∞ –ø–æ–ª–µ–∑–Ω—ã–º
        if (OWNER_ID && NOTIFY_MODE!=="silent"){
          await tgSendMessage(
            OWNER_ID,
            `‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: ${date} ${time}\n‚Üí ${channel}\n–¢–∏–ø: ${video_url?"video":(photo_url?"photo":"text")}\n–ö–Ω–æ–ø–∫–∏: ${
              customButtonsFromRow(r).length ? "custom" : (botLive ? "fallback+deeplink" : "fallback")
            }\n–¢–µ–∫—Å—Ç: ${short(text)}`
          ).catch(()=>{});
        }
      }
    }

    saveSent();

    /* ======== –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ========= */
    const stats = loadStats();
    const day = stats[todayStr] || { should: 0, sent: 0, missedWindows: 0, reported: false };
    day.should = dueToday; // —Å–∫–æ–ª—å–∫–æ –≤—Å–µ–≥–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
    day.sent += sentCount; // —Å–∫–æ–ª—å–∫–æ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ (–∫—É–º—É–ª—è—Ç–∏–≤–Ω–æ –∑–∞ –¥–µ–Ω—å)
    if (dueInWindow > 0 && sentCount === 0) day.missedWindows += 1; // –æ–∫–Ω–æ –±—ã–ª–æ, –Ω–æ –Ω–∏—á–µ–≥–æ –Ω–µ —É—à–ª–æ
    stats[todayStr] = day;
    saveStats(stats);

    // == –ü–æ–≤–µ–¥–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ==
    if (NOTIFY_MODE === "every") {
      // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤ —Ç–µ–∫—É—â–µ–º –æ–∫–Ω–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —á—Ç–æ-—Ç–æ –±—ã–ª–æ, –Ω–æ –Ω–µ —É—à–ª–æ
      if (dueInWindow > 0 && sentCount === 0 && OWNER_ID) {
        await tgSendMessage(
          OWNER_ID,
          `‚ö†Ô∏è GitHub Cron: –≤ –æ–∫–Ω–µ ${CATCHUP_MINUTES} –º–∏–Ω –Ω–∞–∑–∞–¥ –∏ ${LEAD_MINUTES} –º–∏–Ω –≤–ø–µ—Ä—ë–¥ –±—ã–ª–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—è, –Ω–æ –æ—Ç–ø—Ä–∞–≤–æ–∫ –Ω–µ—Ç.
(–≤ –æ–∫–Ω–µ: ${dueInWindow}, —Å–µ–≥–æ–¥–Ω—è –≤—Å–µ–≥–æ: ${dueToday}, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–µ–π—á–∞—Å: 0)`
        );
      }
    } else if (NOTIFY_MODE === "summary" && OWNER_ID) {
      // –†–∞–∑ –≤ –¥–µ–Ω—å (–≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ DAILY_REPORT_HOUR) –ø—Ä–∏—Å—ã–ª–∞–µ–º —Å–≤–æ–¥–∫—É, –µ—Å–ª–∏ –µ—â—ë –Ω–µ –ø—Ä–∏—Å–ª–∞–ª–∏
      if (hourNow === DAILY_REPORT_HOUR && !day.reported) {
        const msg =
          `üìä –°–≤–æ–¥–∫–∞ –∑–∞ ${todayStr} (${TZ})\n` +
          `‚Äî –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: ${day.should}\n` +
          `‚Äî –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${day.sent}\n` +
          `‚Äî –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –æ–∫–æ–Ω: ${day.missedWindows}\n\n` +
          `–û–∫–Ω–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: catch-up ${CATCHUP_MINUTES} –º–∏–Ω –Ω–∞–∑–∞–¥, lead ${LEAD_MINUTES} –º–∏–Ω –≤–ø–µ—Ä—ë–¥.`;
        await tgSendMessage(OWNER_ID, msg).catch(()=>{});
        day.reported = true;
        stats[todayStr] = day;
        saveStats(stats);
      }
    }
    // silent ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ —à–ª—ë–º

    console.log(`Done: dueToday=${dueToday}, dueInWindow=${dueInWindow}, sentNow=${sentCount}, botLive=${botLive}, window=[-${CATCHUP_MINUTES}; +${LEAD_MINUTES}]min, notify=${NOTIFY_MODE}`);
  }catch(e){
    console.error(e);
    if (OWNER_ID && NOTIFY_MODE!=="silent") await tgSendMessage(OWNER_ID, `‚ùå Fatal: ${e?.message||e}`);
    process.exit(1);
  }
})();

