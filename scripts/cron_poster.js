// scripts/cron_poster.js
// Node 18+ (fetch –≤—Å—Ç—Ä–æ–µ–Ω)

import fs from "fs";
import path from "path";

// ============== ENV =================
const BOT_TOKEN = process.env.BOT_TOKEN;
const CHANNEL_ID = process.env.CHANNEL_ID; // -100xxxxxxxxxxx (–ù–ï @username!)
const OWNER_ID = process.env.OWNER_ID || ""; // –∫–æ–º—É —Å–ª–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (user_id)
const TZ = process.env.TZ || "Europe/Moscow";

const WINDOW_MIN = parseInt(process.env.WINDOW_MIN || "30", 10); // –æ–∫–Ω–æ +N –º–∏–Ω
const LAG_MIN = parseInt(process.env.LAG_MIN || "10", 10); // –¥–æ–ø—É—Å–∫ -N –º–∏–Ω
const MISS_GRACE = parseInt(process.env.MISS_GRACE_MIN || "15", 10); // –∞–≤—Ç–æ–¥–æ–ø.–ø—É–±–ª–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ N –º–∏–Ω, –µ—Å–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏
const ANTI_DUP = parseInt(process.env.ANTI_DUP_MIN || "180", 10); // –∞–Ω—Ç–∏-–¥—É–±–ª—å: –Ω–µ —á–∞—â–µ, —á–µ–º —Ä–∞–∑ –≤ N –º–∏–Ω
const MAX_PER_RUN = parseInt(process.env.MAX_PER_RUN || "1", 10); // –Ω–µ –±–æ–ª–µ–µ X –ø–æ—Å—Ç–æ–≤ –∑–∞ –æ–¥–∏–Ω –ø—Ä–æ–≥–æ–Ω
const REPORT_HOUR = parseInt(process.env.REPORT_HOUR || "21", 10); // —á–∞—Å –¥–ª—è –¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞

const KEEPALIVE_URL = (process.env.KEEPALIVE_URL || "").trim();

const LINK_SKILLS = (process.env.LINK_SKILLS || "").trim();
const LINK_PRICES = (process.env.LINK_PRICES || "").trim();
const LINK_FEEDBACK = (process.env.LINK_FEEDBACK || "").trim();
const LINK_ORDER = (process.env.LINK_ORDER || "").trim(); // CTA

if (!BOT_TOKEN || !CHANNEL_ID) {
  console.error("Missing BOT_TOKEN or CHANNEL_ID env");
  process.exit(1);
}

// –ø—É–±–ª–∏–∫—É–µ–º –û–¢ –ò–ú–ï–ù–ò –ö–ê–ù–ê–õ–ê (–º–æ–∂–Ω–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–µ–∫—Ä–µ—Ç–æ–º SENDER_CHAT_ID)
const SENDER_CHAT_ID = process.env.SENDER_CHAT_ID || CHANNEL_ID;

// ============== helpers ==============
function sleep(ms){ return new Promise(r => setTimeout(r, ms)); }

function convertDriveUrl(u){
  if (!u) return "";
  try {
    const url = new URL(u.trim());
    if (url.hostname.includes("drive.google.com")) {
      // https://drive.google.com/file/d/<id>/view -> direct
      const m = url.pathname.match(/\/file\/d\/([^/]+)/);
      if (m) return `https://drive.google.com/uc?export=download&id=${m[1]}`;
    }
  } catch(_) {}
  return u.trim();
}

function toISOLocal(dateStr, timeStr){
  // YYYY-MM-DD, HH:MM ‚Äî –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π TZ —Ä–∞–Ω–Ω–µ—Ä–∞ (–≤—ã—Å—Ç–∞–≤–ª—è–µ–º –≤–æ workflow)
  const [Y,M,D] = (dateStr||"").split("-").map(Number);
  const [h,m] = (timeStr||"").split(":").map(Number);
  return new Date(Y,(M||1)-1,D,h||0,m||0);
}

function diffMin(a,b){ return (a.getTime()-b.getTime())/60000; }

function withinWindow(when, now, winPlus, lagMinus){
  const d = diffMin(when, now);
  return d >= -lagMinus && d <= winPlus;
}

// ============== ¬´—Ç–æ–ª—Å—Ç—ã–π¬ª CSV-–ø–∞—Ä—Å–µ—Ä ==============
function detectSepFromHeader(src){
  let inQ=false, c=0, s=0;
  for (let i=0;i<src.length;i++){
    const ch=src[i];
    if (ch === '"'){
      if (inQ && src[i+1]==='"'){ i++; }
      else inQ=!inQ;
      continue;
    }
    if (!inQ && ch === ",") c++;
    else if (!inQ && ch === ";") s++;
    else if (!inQ && ch === "\n") break;
  }
  return s>c ? ";" : ",";
}

function parseCSV(filePath){
  let s = fs.readFileSync(filePath, "utf8");
  s = s.replace(/^\uFEFF/,"").replace(/\r\n/g,"\n").replace(/\r/g,"\n");
  if (!s.trim()) return { rows:[], sep:"," };

  const sep = detectSepFromHeader(s);

  const rowsRaw=[]; let row=[], field="", inQ=false;
  for (let i=0;i<s.length;i++){
    const ch = s[i];
    if (ch === '"'){
      if (inQ && s[i+1]==='"'){ field+='"'; i++; }
      else inQ=!inQ;
      continue;
    }
    if (!inQ && ch === sep){ row.push(field); field=""; continue; }
    if (!inQ && ch === "\n"){
      row.push(field); field="";
      if (row.some(v => String(v).trim() !== "")) rowsRaw.push(row);
      row=[]; continue;
    }
    field += ch;
  }
  if (field.length>0 || row.length>0){
    row.push(field);
    if (row.some(v => String(v).trim() !== "")) rowsRaw.push(row);
  }
  if (!rowsRaw.length) return { rows:[], sep };

  const headers = rowsRaw[0].map(h => String(h||"").trim());
  const data = rowsRaw.slice(1);

  const rows = [];
  for (const rec of data){
    const obj = {};
    for (let i=0;i<headers.length;i++){
      obj[headers[i]] = (rec[i] ?? "").toString();
    }
    if (!obj.photo_url && obj.photo) obj.photo_url = obj.photo;
    if (!obj.video_url && obj.video) obj.video_url = obj.video;

    if (obj.photo_url) obj.photo_url = convertDriveUrl(obj.photo_url);
    if (obj.video_url) obj.video_url = convertDriveUrl(obj.video_url);

    if (obj.text) obj.text = obj.text.replace(/\\n/g,"\n");

    const meaningful = Object.values(obj).some(v => String(v).trim() !== "");
    if (meaningful) rows.push(obj);
  }
  return { rows, sep };
}

// ============== –∫–Ω–æ–ø–∫–∏ (–≤ –∫–∞–Ω–∞–ª –ø–æ–¥ –ø–æ—Å—Ç) ==============
function buildInlineKeyboard(row){
  const list = [];

  // –ø–æ—Å—Ç–æ–≤—ã–µ (–∏–∑ CSV): btn1_text/btn1_url ... btn4_text/btn4_url
  for (let i=1;i<=4;i++){
    const t=(row[`btn${i}_text`]||"").trim();
    const u=(row[`btn${i}_url`] ||"").trim();
    if (t && u) list.push([{ text:t, url:u }]);
  }

  // –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ä—è–¥
  const extra=[];
  if (LINK_SKILLS) extra.push({ text:"üß† –ß—Ç–æ —É–º–µ–µ—Ç?", url:LINK_SKILLS });
  if (LINK_PRICES) extra.push({ text:"üí∞ –¶–µ–Ω—ã", url:LINK_PRICES });
  if (LINK_FEEDBACK) extra.push({ text:"üí¨ –û—Ç–∑—ã–≤—ã", url:LINK_FEEDBACK });
  if (LINK_ORDER) extra.push({ text:"üõí –•–æ—á—É –±–æ—Ç–∞", url:LINK_ORDER }); // ‚Üê CTA –≤ –∫–∞–Ω–∞–ª

  if (extra.length) list.push(extra);
  return list.length ? { inline_keyboard:list } : undefined;
}

// ============== Telegram API ==============
const TG = {
  async call(method, payload){
    const url = `https://api.telegram.org/bot${BOT_TOKEN}/${method}`;
    const res = await fetch(url,{
      method:"POST",
      headers:{ "Content-Type":"application/json" },
      body: JSON.stringify(payload)
    });
    const j = await res.json().catch(()=>({}));
    if (!j.ok){
      throw new Error(`${method} failed: ${res.status} ${res.statusText} ${JSON.stringify(j)}`);
    }
    return j.result;
  },

  async sendText(text, reply_markup){
    return this.call("sendMessage",{
      chat_id: CHANNEL_ID,
      sender_chat_id: SENDER_CHAT_ID,
      text,
      parse_mode: "HTML",
      disable_web_page_preview: false,
      allow_sending_without_reply: true,
      reply_markup
    });
  },

  async sendPhoto(photo, caption, reply_markup){
    return this.call("sendPhoto",{
      chat_id: CHANNEL_ID,
      sender_chat_id: SENDER_CHAT_ID,
      photo,
      caption,
      parse_mode: "HTML",
      allow_sending_without_reply: true,
      reply_markup
    });
  },

  async sendVideo(video, caption, reply_markup){
    return this.call("sendVideo",{
      chat_id: CHANNEL_ID,
      sender_chat_id: SENDER_CHAT_ID,
      video,
      caption,
      parse_mode: "HTML",
      allow_sending_without_reply: true,
      reply_markup
    });
  },

  async notifyOwner(text){
    if (!OWNER_ID) return;
    try { await this.call("sendMessage",{ chat_id:OWNER_ID, text }); } catch(_) {}
  }
};

// ============== sent.json ==============
const SENT_FILE = path.resolve("sent.json");
function readSent(){
  try { return JSON.parse(fs.readFileSync(SENT_FILE,"utf8")); }
  catch { return {}; }
}
function writeSent(x){
  fs.writeFileSync(SENT_FILE, JSON.stringify(x,null,2));
}

// –∫–ª—é—á –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
function makeKey(row){
  const date = (row.date||"").trim();
  const time = (row.time||"").trim();
  const media = (row.photo_url||row.video_url||"").trim();
  const text = (row.text||"").trim().slice(0,80);
  return `${date} ${time} | ${media} | ${text}`;
}

// ============== MAIN ====================
async function main(){
  // 0) keepalive (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
  if (KEEPALIVE_URL){
    try { await fetch(KEEPALIVE_URL, { method:"GET" }); } catch(_) {}
  }

  // 1) CSV
  const csvPath = path.resolve("avtopost.csv");
  const csv = parseCSV(csvPath);

  // 2) Sent-–ª–æ–≥
  const sent = readSent();

  // 3) —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –∑–æ–Ω–µ —Ä–∞–Ω–Ω–µ—Ä–∞ (TZ –∑–∞–¥–∞—ë–º –≤–æ workflow)
  const now = new Date();

  // 4) –∞–Ω—Ç–∏-–¥—É–±–ª–∏ –∏ –ª–∏–º–∏—Ç –Ω–∞ –ø—Ä–æ–≥–æ–Ω
  const lastAt = sent.__last_post_at ? new Date(sent.__last_post_at) : null;
  const minutesSinceLast = lastAt ? diffMin(now, lastAt) : Infinity;
  let publishedThisRun = 0;

  // 5) –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
  for (const row of csv.rows){
    const date = (row.date||"").trim();
    const time = (row.time||"").trim();
    const text = (row.text||"").trim();
    if (!date || !time || !text) continue;

    const when = toISOLocal(date, time);
    const key = makeKey(row);

    // –æ–∫–Ω–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: [-LAG_MIN ; +WINDOW_MIN]
    if (!withinWindow(when, now, WINDOW_MIN, LAG_MIN)) continue;

    // —É–∂–µ –ø—É–±–ª–∏–∫–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –ø–æ—Å—Ç —Ä–∞–Ω–µ–µ?
    if (sent[key]) continue;

    // –∞–Ω—Ç–∏-–¥—É–±–ª—å –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    if (minutesSinceLast < ANTI_DUP) {
      // –ø—Ä–æ–ø—É—Å—Ç–∏–º –≤ —ç—Ç–æ–º –ø—Ä–æ–≥–æ–Ω–µ, –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ MISS_GRACE —Å–¥–µ–ª–∞–µ—Ç –ø–æ–∑–∂–µ
      continue;
    }

    // –ª–∏–º–∏—Ç –Ω–∞ –æ–¥–∏–Ω –ø—Ä–æ–≥–æ–Ω
    if (publishedThisRun >= MAX_PER_RUN) break;

    // –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–Ω–æ–ø–æ–∫
    const kb = buildInlineKeyboard(row);

    try {
      if (row.photo_url){
        const cap = text.length > 1000 ? text.slice(0,1000) + "‚Ä¶" : text;
        await TG.sendPhoto(row.photo_url, cap, kb);
        if (text.length > 1000){
          await sleep(400);
          await TG.sendText(text.slice(1000), undefined);
        }
      } else if (row.video_url){
        const cap = text.length > 1000 ? text.slice(0,1000) + "‚Ä¶" : text;
        await TG.sendVideo(row.video_url, cap, kb);
        if (text.length > 1000){
          await sleep(400);
          await TG.sendText(text.slice(1000), undefined);
        }
      } else {
        await TG.sendText(text, kb);
      }

      // –æ—Ç–º–µ—Ç–∏–º –æ—Ç–ø—Ä–∞–≤–∫—É
      sent[key] = true;
      publishedThisRun++;
      sent.__last_post_at = new Date().toISOString();
      writeSent(sent);

      await TG.notifyOwner(`‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: 1 (–æ–∫–Ω–æ +${WINDOW_MIN} / ‚àí${LAG_MIN} –º–∏–Ω; –∞–≤—Ç–æ-–¥–æ–ø. –ø–æ—Å–ª–µ ${MISS_GRACE} –º–∏–Ω)`);
      await sleep(600); // –ª—ë–≥–∫–∞—è –ø–∞—É–∑–∞

    } catch (err){
      await TG.notifyOwner(`‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: ${date} ${time}\n${(err && err.message) || err}`);
    }
  }

  // 6) –µ—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è –µ—Å—Ç—å –ø–æ—Å—Ç –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é –∏ –º—ã –µ–≥–æ –Ω–µ –ø–æ–π–º–∞–ª–∏ ‚Äî –∞–≤—Ç–æ–¥–æ–≥–æ–Ω —á–µ—Ä–µ–∑ MISS_GRACE
  // (–ø—É–±–ª–∏–∫—É–µ–º, –µ—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è > when + MISS_GRACE –∏ –∑–∞–ø–∏—Å–∏ –µ—â—ë –Ω–µ—Ç)
  const todayISO = new Date().toISOString().slice(0,10);
  for (const row of csv.rows){
    const d=(row.date||"").trim();
    const t=(row.time||"").trim();
    const text=(row.text||"").trim();
    if (!d || !t || !text) continue;
    if (d !== todayISO) continue;

    const when = toISOLocal(d,t);
    const key = makeKey(row);
    if (sent[key]) continue;

    if (diffMin(now, when) >= MISS_GRACE){ // –ø—Ä–æ—à–ª–æ >= MISS_GRACE –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ –ø–ª–∞–Ω–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
      // –ø—Ä–æ–≤–µ—Ä–∏–º –∞–Ω—Ç–∏-–¥—É–±–ª—å –∏ –ª–∏–º–∏—Ç
      if (sent.__last_post_at){
        const last = new Date(sent.__last_post_at);
        if (diffMin(now,last) < ANTI_DUP) break;
      }
      if (publishedThisRun >= MAX_PER_RUN) break;

      // –ø—É–±–ª–∏–∫—É–µ–º –¥–æ–≥–æ–Ω
      const kb = buildInlineKeyboard(row);
      try{
        if (row.photo_url){
          const cap = text.length > 1000 ? text.slice(0,1000) + "‚Ä¶" : text;
          await TG.sendPhoto(row.photo_url, cap, kb);
          if (text.length > 1000){
            await sleep(400);
            await TG.sendText(text.slice(1000), undefined);
          }
        } else if (row.video_url){
          const cap = text.length > 1000 ? text.slice(0,1000) + "‚Ä¶" : text;
          await TG.sendVideo(row.video_url, cap, kb);
          if (text.length > 1000){
            await sleep(400);
            await TG.sendText(text.slice(1000), undefined);
          }
        } else {
          await TG.sendText(text, kb);
        }
        sent[key] = true;
        publishedThisRun++;
        sent.__last_post_at = new Date().toISOString();
        writeSent(sent);

        await TG.notifyOwner(`‚úÖ –î–æ–≥–æ–Ω –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é: 1 (–ø—Ä–æ—Å—Ä–æ—á–∫–∞ ‚â• ${MISS_GRACE} –º–∏–Ω)`);
      } catch(err){
        await TG.notifyOwner(`‚ùå –û—à–∏–±–∫–∞ –¥–æ–≥–æ–Ω-–ø—É–±–ª–∏–∫–∞—Ü–∏–∏: ${d} ${t}\n${(err && err.message) || err}`);
      }
      break; // –æ–¥–Ω–æ–≥–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ
    }
  }

  // 7) –¥–Ω–µ–≤–Ω–æ–π –æ—Ç—á—ë—Ç ‚Äî —Ä–æ–≤–Ω–æ –æ–¥–∏–Ω —Ä–∞–∑ –≤ –¥–µ–Ω—å –ø–æ—Å–ª–µ REPORT_HOUR (–ø–æ –ª–æ–∫–∞–ª—å–Ω–æ–π TZ —Ä–∞–Ω–Ω–µ—Ä–∞)
  const nowLocal = new Date();
  const needDaily = nowLocal.getHours() >= REPORT_HOUR && sent.__report_date !== todayISO;

  if (needDaily){
    let totalToday=0, sentToday=0;
    for (const row of csv.rows){
      const d=(row.date||"").trim();
      if (d === todayISO){
        totalToday++;
        const key = makeKey(row);
        if (sent[key]) sentToday++;
      }
    }
    await TG.notifyOwner(
      `üìÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á—ë—Ç (${todayISO}):\n` +
      `–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: ${totalToday}\n` +
      `–§–∞–∫—Ç–∏—á–µ—Å–∫–∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: ${sentToday}`
    );
    sent.__report_date = todayISO;
    writeSent(sent);
  }
}

main().catch(async (e)=>{
  console.error(e);
  await TG.notifyOwner(`‚ùå –°–∫—Ä–∏–ø—Ç —É–ø–∞–ª: ${e.message || e}`);
  process.exit(1);
});
