// scripts/cron_poster.js
// Node 18+ (fetch –≤—Å—Ç—Ä–æ–µ–Ω)

import fs from "fs";
import path from "path";

// =================== ENV ===================
const BOT_TOKEN   = process.env.BOT_TOKEN;
const CHANNEL_ID  = process.env.CHANNEL_ID;         // -100XXXXXXXXXX (–ù–ï @username)
const OWNER_ID    = process.env.OWNER_ID || "";     // –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ ‚Äî –æ—Ç—Å—ã–ª–∞—Ç—å –æ—Ç—á—ë—Ç—ã –≤ –õ–°

// –æ–∫–Ω–æ –ø–æ–∏—Å–∫–∞ –ø–æ—Å—Ç–æ–≤: –æ—Ç -LAG –¥–æ +WINDOW –º–∏–Ω—É—Ç –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
const WINDOW_MIN  = parseInt(process.env.WINDOW_MIN  || process.env.WINDOW_MINUTES || "30", 10); // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 30
const LAG_MIN     = parseInt(process.env.LAG_MIN     || "10", 10);    // ¬´–æ–ø–æ–∑–¥–∞–Ω–∏–µ¬ª, –¥–æ–ø—É—Å—Ç–∏–º -10 –º–∏–Ω –Ω–∞–∑–∞–¥
const MISS_GRACE  = parseInt(process.env.MISS_GRACE_MIN || "15", 10); // ¬´–ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞¬ª (–º–∏–Ω)

// –∞–Ω—Ç–∏–¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ: –µ—Å–ª–∏ —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø—Ä–æ—à–ª–æ –º–µ–Ω—å—à–µ X –º–∏–Ω—É—Ç ‚Äî –Ω–µ –ø—É–±–ª–∏–∫—É–µ–º
const ANTI_DUP_MIN = parseInt(process.env.ANTI_DUP_MIN || "180", 10); // 3 —á–∞—Å–∞

// –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –Ω–µ –±–æ–ª—å—à–µ N –ø–æ—Å—Ç–æ–≤ –∑–∞ –æ–¥–∏–Ω –ø—Ä–æ–≥–æ–Ω (–ø–æ–¥—Å—Ç—Ä–∞—Ö–æ–≤–∫–∞)
const X_PER_RUN   = parseInt(process.env.X_PER_RUN || "1", 10);

// –≤–µ—á–µ—Ä–Ω–∏–π –æ—Ç—á—ë—Ç (—á–∞—Å —Å—É—Ç–æ–∫ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–Ω–Ω–µ—Ä–∞)
const REPORT_HOUR = parseInt(process.env.REPORT_HOUR || "21", 10);

// –ü—É–±–ª–∏–∫—É–µ–º –æ—Ç –∏–º–µ–Ω–∏ –∫–∞–Ω–∞–ª–∞ (–≤–∞–∂–Ω–æ –¥–ª—è ¬´–û–±—Å—É–¥–∏—Ç—å¬ª)
const SENDER_CHAT_ID = process.env.SENDER_CHAT_ID || CHANNEL_ID;

// keepalive –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ ‚Äî –µ—Å–ª–∏ –∑–∞–¥–∞–Ω, –ø–∏–Ω–≥—É–µ–º –ø–µ—Ä–µ–¥ —Ä–∞–±–æ—Ç–æ–π
const KEEPALIVE_URL = process.env.KEEPALIVE_URL || "";

if (!BOT_TOKEN || !CHANNEL_ID) {
  console.error("Missing BOT_TOKEN or CHANNEL_ID env");
  process.exit(1);
}

// =================== Helpers ===================
function sleep(ms) { return new Promise(r => setTimeout(r, ms)); }

function sha1(x){
  return crypto.createHash("sha1").update(String(x)).digest("hex");
}

// –ü—Ä–µ–≤—Ä–∞—â–∞–µ–º –ª—é–±—ã–µ Google Drive —Å—Å—ã–ª–∫–∏ –≤ –ø—Ä—è–º—ã–µ download-—Å—Å—ã–ª–∫–∏
function convertDriveUrl(u) {
  if (!u) return "";
  const s = String(u).trim();

  // –£–∂–µ –ø—Ä—è–º–∞—è?
  if (/drive\.google\.com\/uc\b/i.test(s) && /[?&](id|export)=/i.test(s)) return s;

  let id = null;

  // /file/d/<ID>/view
  let m = s.match(/\/file\/d\/([^/]+)\//i);
  if (m) id = m[1];

  // open?id=<ID> / uc?id=<ID> / ?id=<ID>
  if (!id) {
    m = s.match(/[?&]id=([^&]+)/i);
    if (m) id = m[1];
  }

  // ¬´–ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–µ¬ª drive-—Å—Å—ã–ª–∫–∏, –≥–¥–µ –ø—Ä–æ—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è ID
  if (!id) {
    m = s.match(/drive\.google\.com\/(?:file\/d\/|u\/\d\/|thumbnail\?id=)?([a-zA-Z0-9_-]{10,})/i);
    if (m) id = m[1];
  }

  if (id) return `https://drive.google.com/uc?export=download&id=${id}`;
  return s;
}

function toISOLocal(dateStr, timeStr) {
  const [Y, M, D] = (dateStr || "").split("-").map(Number);
  const [h, m]    = (timeStr || "").split(":").map(Number);
  return new Date(Y, (M || 1) - 1, D, h || 0, m || 0);
}

function withinWindow(when, now, windowMin, lagMin) {
  const diffMin = (when - now) / 60000;
  // —Ä–∞–∑—Ä–µ—à–∞–µ–º –Ω–µ–º–Ω–æ–≥–æ ¬´–≤ –ø—Ä–æ—à–ª–æ–µ¬ª (lag) –∏ –≤–ø–µ—Ä—ë–¥ (window)
  return diffMin >= -Math.abs(lagMin) && diffMin <= Math.abs(windowMin);
}
// –ß–∏—Ç–∞–µ–º/–ø–∏—à–µ–º sent.json
function readSent(){
  try { return JSON.parse(fs.readFileSync(SENT_FILE, "utf8")); }
  catch { return {}; }
}
function writeSent(obj){
  fs.writeFileSync(SENT_FILE, JSON.stringify(obj, null, 2));
}

// =================== ¬´–¢–æ–ª—Å—Ç—ã–π¬ª CSV-–ø–∞—Ä—Å–µ—Ä ===================
function detectSepFromHeader(src) {
  let inQ = false, commas = 0, semis = 0;
  for (let i = 0; i < src.length; i++) {
    const ch = src[i];
    if (ch === '"') {
      if (inQ && src[i + 1] === '"') { i++; }
      else inQ = !inQ;
    } else if (!inQ && ch === "\n") break;
    else if (!inQ && ch === ",") commas++;
    else if (!inQ && ch === ";") semis++;
  }
  return semis > commas ? ";" : ",";
}

function parseCSV(filePath) {
  let s = "";
  try { s = fs.readFileSync(filePath, "utf8"); } catch { return { rows: [], sep: "," }; }
  s = s.replace(/^\uFEFF/, "").replace(/\r\n/g, "\n").replace(/\r/g, "\n");
  if (!s.trim()) return { rows: [], sep: "," };

  const sep = detectSepFromHeader(s);

  const rowsRaw  = [];
  let row = [], field = "", inQ = false;

  for (let i = 0; i < s.length; i++) {
    const ch = s[i];
    if (ch === '"') {
      if (inQ && s[i + 1] === '"') { field += '"'; i++; }
      else inQ = !inQ;
      continue;
    }
    if (!inQ && ch === sep) { row.push(field); field = ""; continue; }
    if (!inQ && ch === "\n") {
      row.push(field); field = "";
      if (row.some(c => String(c).trim() !== "")) rowsRaw.push(row);
      row = [];
      continue;
    }
    field += ch;
  }
  if (field.length > 0 || row.length > 0) {
    row.push(field);
    if (row.some(c => String(c).trim() !== "")) rowsRaw.push(row);
  }
  if (!rowsRaw.length) return { rows: [], sep };

  const headers = rowsRaw[0].map(h => String(h || "").trim());
  const data    = rowsRaw.slice(1);

  const rows = [];
  for (const rec of data) {
    const obj = {};
    for (let i = 0; i < headers.length; i++) {
      obj[headers[i]] = (rec[i] ?? "").toString();
    }

    if (!obj.photo_url && obj.photo) obj.photo_url = obj.photo;
    if (!obj.video_url && obj.video) obj.video_url = obj.video;

    if (obj.photo_url) obj.photo_url = convertDriveUrl(obj.photo_url);
    if (obj.video_url) obj.video_url = convertDriveUrl(obj.video_url);

    if (obj.text) obj.text = obj.text.replace(/\\n/g, "\n");

    const meaningful = Object.values(obj).some(v => String(v).trim() !== "");
    if (meaningful) rows.push(obj);
  }
  return { rows, sep };
}

// =================== –ö–Ω–æ–ø–∫–∏ ===================
function buildInlineKeyboard(row) {
  const btns = [];
  for (let i = 1; i <= 4; i++) {
    const t = (row[`btn${i}_text`] || "").trim();
    const u = (row[`btn${i}_url`]  || "").trim();
    if (t && u) btns.push([{ text: t, url: u }]);
  }
  
  return btns.length ? { inline_keyboard: btns } : undefined;
}
// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏ (–µ—Å–ª–∏ –Ω–µ—Ç –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —Å—Ç—Ä–æ–∫)
  if (LINK_SKILLS || LINK_PRICES || LINK_FEEDBACK || LINK_ORDER){
    const extra = [];
    if (LINK_SKILLS) extra.push({ text:"üß† –ß—Ç–æ —É–º–µ–µ—Ç?", url: LINK_SKILLS });
    if (LINK_PRICES) extra.push({ text:"üí∞ –¶–µ–Ω—ã", url: LINK_PRICES });
    if (LINK_FEEDBACK) extra.push({ text:"üí¨ –û—Ç–∑—ã–≤—ã", url: LINK_FEEDBACK });
    if (LINK_ORDER) extra.push({ text:"üõí –ó–∞–∫–∞–∑–∞—Ç—å", url: LINK_ORDER });
    if (extra.length) list.push(extra);
  }

// =================== Telegram API ===================
const TG = {
  async call(method, payload) {
    const url = `https://api.telegram.org/bot${BOT_TOKEN}/${method}`;
    const res = await fetch(url, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(payload)
    });
    const j = await res.json().catch(() => ({}));
    if (!j.ok) {
      throw new Error(`${method} failed: ${res.status} ${res.statusText} ${JSON.stringify(j)}`);
    }
    return j.result;
  },

  async sendText(text, reply_markup) {
    return this.call("sendMessage", {
      chat_id: CHANNEL_ID,
      sender_chat_id: SENDER_CHAT_ID,   // –ü—É–±–ª–∏–∫—É–µ–º –æ—Ç –∏–º–µ–Ω–∏ –∫–∞–Ω–∞–ª–∞ ‚Üí –ø–æ—è–≤–∏—Ç—Å—è ¬´–û–±—Å—É–¥–∏—Ç—å¬ª
      text,
      parse_mode: "HTML",
      disable_web_page_preview: false,
      allow_sending_without_reply: true,
      reply_markup
    });
  },

  async sendPhoto(photo, caption, reply_markup) {
    return this.call("sendPhoto", {
      chat_id: CHANNEL_ID,
      sender_chat_id: SENDER_CHAT_ID,
      photo,
      caption,
      parse_mode: "HTML",
      allow_sending_without_reply: true,
      reply_markup
    });
  },

  async sendVideo(video, caption, reply_markup) {
    return this.call("sendVideo", {
      chat_id: CHANNEL_ID,
      sender_chat_id: SENDER_CHAT_ID,
      video,
      caption,
      parse_mode: "HTML",
      allow_sending_without_reply: true,
      reply_markup
    });
  },

  async notifyOwner(text) {
    if (!OWNER_ID) return;
    try { await this.call("sendMessage", { chat_id: OWNER_ID, text }); } catch {}
  }
};

// =================== sent.json ===================
const SENT_FILE = path.resolve("sent.json");
}
function readSent() {
  try { return JSON.parse(fs.readFileSync(SENT_FILE, "utf8")); }
  catch { return {}; }
}
function writeSent(obj) {
  fs.writeFileSync(SENT_FILE, JSON.stringify(obj, null, 2));
}
function makeKey(row) {
  // –∫–ª—é—á –ø–æ—Å—Ç–∞ ‚Äî –¥–∞—Ç–∞ + –≤—Ä–µ–º—è + —Ç–∏–ø/—Å—Å—ã–ª–∫–∞ –º–µ–¥–∏–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
  return `${(row.date||"").trim()} ${(row.time||"").trim()} ${(row.photo_url||"")}${(row.video_url||"")}`;
}

// =================== MAIN ===================
async function main(){
  const csvPath = path.resolve("avtopost.csv");
  if (!fs.existsSync(csvPath)){
    await TG.notifyOwner("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª avtopost.csv");
    return;
  }

  const { rows } = parseCSV(csvPath);
  const sent = readSent();
  const now = new Date();

  let posted = 0;

  // –∞–Ω—Ç–∏–¥—É–±–ª–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
  const lastTs = sent.__last_post_ts || 0;
  if (lastTs && (now.getTime() - lastTs) < ANTI_DUP_MIN*60000){
    // —Å–ª–∏—à–∫–æ–º —Ä–∞–Ω–æ –ø–æ—Å–ª–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ø–æ—Å—Ç–∞ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–µ—Å—å –ø—Ä–æ–≥–æ–Ω
    return;
  }

  for (const row of csv.rows) {
    if (posted >= MAX_PER_RUN) break; 
    
    const date = (row.date || "").trim();
    const time = (row.time || "").trim();
    const text = (row.text || "").trim();
    if (!date || !time || !text) continue;

    const when = toISOLocal(date, time);
    if (!withinWindow(when, now, WINDOW_MIN, LAG_MIN)) continue;

    // –∫–ª—é—á –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è: –¥–∞—Ç–∞/–≤—Ä–µ–º—è + sha1(–º–µ–¥–∏–∞—Å—Å—ã–ª–æ–∫ + —Ç–µ–∫—Å—Ç)
    const mediaPart = `${row.photo_url||""}|${row.video_url||""}`;
    const key = `${date} ${time} ${sha1(mediaPart+"|"+text)}`;
    if (sent[key]) continue; // —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏

    // –∞–Ω—Ç–∏–¥—É–±–ª—å: –µ—Å–ª–∏ –µ—Å—Ç—å –∑–∞–ø–∏—Å—å –Ω–∞ +-WINDOW_MIN/LAG_MIN —Å —Ç–µ–º –∂–µ —Ö—ç—à–µ–º, —Ç–æ–∂–µ —Å–∫–∏–ø–∞–µ–º
    const dayPrefix = `${date} ${time.split(":")[0]}`; // –≥—Ä—É–±–æ –ø–æ —á–∞—Å—É
    const similar = Object.keys(sent).some(k => k.includes(date) && k.endsWith(sha1(mediaPart+"|"+text)));
    if (similar) continue;

    const kb = buildInlineKeyboard(row);

    try {
      if (row.photo_url) {
        const cap = text.length > 1000 ? text.slice(0, 1000) + "‚Ä¶" : text;
        await TG.sendPhoto(row.photo_url, cap, kb);
        if (text.length > 1000) {
          await sleep(400);
          await TG.sendText(text.slice(1000), undefined);
        }
      } else if (row.video_url) {
        const cap = text.length > 1000 ? text.slice(0, 1000) + "‚Ä¶" : text;
        await TG.sendVideo(row.video_url, cap, kb);
        if (text.length > 1000) {
          await sleep(400);
          await TG.sendText(text.slice(1000), undefined);
        }
      } else {
        await TG.sendText(text, kb);
      }

      sent[key] = true;
      posted++;
      sent.__last_post_ts = now.getTime(); // –æ—Ç–º–µ—Ç–∏–º –≤—Ä–µ–º—è
      writeSent(sent);

      // —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø–æ —Ñ–∞–∫—Ç—É –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
      await TG.notifyOwner(`‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: 1 (–æ–∫–Ω–æ +${WINDOW_MIN} / -${LAG_MIN} –º–∏–Ω; –∞–Ω—Ç–∏–¥—É–±–ª—å ${ANTI_DUP_MIN} –º–∏–Ω)`);

      // –Ω–µ–±–æ–ª—å—à–æ–π –±—Ä–∏–¥–∂ –º–µ–∂–¥—É –ø–æ—Å—Ç–∞–º–∏
      await sleep(600);// –Ω–µ–º–Ω–æ–≥–æ –ø–æ–¥—ã—à–∏–º, –µ—Å–ª–∏ –≤–¥—Ä—É–≥ MAX_PER_RUN>1

      // –ª–∏–º–∏—Ç ¬´–Ω–µ –±–æ–ª—å—à–µ N –ø–æ—Å—Ç–æ–≤ –∑–∞ –ø—Ä–æ–≥–æ–Ω¬ª
      if (posted >= X_PER_RUN) break;

    } catch (err) {
      await TG.notifyOwner(`‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: ${date} ${time}\n${(err && err.message) || err}`);
    }
  }

  // –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ ‚Äî —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏
  if (posted > 0) {
    await TG.notifyOwner(`‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: ${posted} (–æ–∫–Ω–æ +${WINDOW_MIN}/-${LAG_MIN} –º–∏–Ω; –∞–Ω—Ç–∏–¥—É–±–ª—å ${ANTI_DUP_MIN} –º–∏–Ω; –ª–∏–º–∏—Ç –∑–∞ –ø—Ä–æ–≥–æ–Ω ${X_PER_RUN})`);
  }

  // –†–∞–∑–æ–≤—ã–π –≤–µ—á–µ—Ä–Ω–∏–π –æ—Ç—á—ë—Ç
  // –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á—ë—Ç ‚Äî —Ä–æ–≤–Ω–æ –æ–¥–∏–Ω —Ä–∞–∑ –ø–æ—Å–ª–µ REPORT_HOUR
  const todayStrUTC = new Date().toISOString().slice(0,10); // –¥–∞—Ç–∞ (UTC, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ)
  const nowLocal = new Date(); // –≤ TZ —Ä–∞–Ω–Ω–µ—Ä–∞ (—Å–º. workflow -> TZ)
  if (nowLocal.getHours() >= REPORT_HOUR && sent.__report_date !== todayStrUTC){
    let totalToday=0, sentToday=0;
    for (const row of rows){
      const d = (row.date||"").trim();
      if (d === todayStrUTC){
        totalToday++;
        const media = `${row.photo_url||""}|${row.video_url||""}`;
        const k = `${row.date} ${row.time} ${sha1(media+"|"+(row.text||"").trim())}`;
        if (sent[k]) sentToday++;
      }
    }
    await TG.notifyOwner(
      `üìÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á—ë—Ç (${todayStrUTC}):\n`+
      `–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: ${totalToday}\n`+
      `–§–∞–∫—Ç–∏—á–µ—Å–∫–∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: ${sentToday}`
    );
    sent.__report_date = todayStrUTC;
    writeSent(sent);
  }
}

main().catch(async (e) => {
  console.error(e);
  await TG.notifyOwner(`‚ùå –°–∫—Ä–∏–ø—Ç —É–ø–∞–ª: ${e.message || e}`);
  process.exit(1);
});
