name: Telegram Auto Poster

on:
  schedule:
    - cron: "*/5 * * * *"   # запуск каждые 5 минут
  workflow_dispatch:         # ручной запуск

concurrency:
  group: telegram-auto-poster
  cancel-in-progress: true

permissions:
  contents: write            # нужно, чтобы пушить sent.json обратно в репо

jobs:
  post:
    runs-on: ubuntu-latest

    # === все переменные, которые читаются скриптом scripts/cron_poster.js ===
    env:
  BOT_TOKEN:      ${{ secrets.BOT_TOKEN }}
  CHANNEL_ID:     ${{ secrets.CHANNEL_ID }}
  OWNER_ID:       ${{ secrets.OWNER_ID }}

  TZ:             ${{ secrets.TZ }}
  WINDOW_MIN:     ${{ secrets.WINDOW_MIN }}
  REPORT_HOUR:    '21'

  COOL_DOWN_MIN:  '180'     # не публиковать одинаковое в течение 3 часов
  MAX_PER_RUN:    '1'       # не более 1 поста за один прогон

  KEEPALIVE_URL:  ${{ secrets.KEEPALIVE_URL }}
  LINK_SKILLS:    ${{ secrets.LINK_SKILLS }}
  LINK_PRICES:    ${{ secrets.LINK_PRICES }}
  LINK_FEEDBACK:  ${{ secrets.LINK_FEEDBACK }}
  LINK_ORDER:     ${{ secrets.LINK_ORDER }}
  
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0          # важно для git pull/push

      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      # скрипт без зависимостей — npm install не нужен
      - name: Run cron poster
        run: node scripts/cron_poster.js

      # определяем, изменился ли sent.json (true/false в outputs)
      - name: Detect changes in sent.json
        id: changes
        run: |
          if git diff --quiet -- sent.json; then
            echo "changed=false" >> $GITHUB_OUTPUT
          else
            echo "changed=true" >> $GITHUB_OUTPUT
          fi

      # коммитим и пушим только если действительно есть изменения
      - name: Commit sent.json
        if: steps.changes.outputs.changed == 'true'
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          BRANCH="$(git rev-parse --abbrev-ref HEAD)"
          git add sent.json
          git commit -m "chore: update sent.json (auto poster)"
          git pull --rebase origin "$BRANCH"
          git push origin "$BRANCH"
