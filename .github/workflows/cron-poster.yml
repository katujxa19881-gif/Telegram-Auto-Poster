name: Telegram Auto Poster

on:
  schedule:
    - cron: "*/5 * * * *" # каждые 5 минут
  workflow_dispatch: {}

concurrency:
  group: telegram-auto-poster
  cancel-in-progress: true

permissions:
  contents: write

jobs:
  post:
    runs-on: ubuntu-latest
    env:
      # обязательные
      BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
      CHANNEL_ID: ${{ secrets.CHANNEL_ID }} # формат: -100XXXXXXXXXXXX
      OWNER_ID: ${{ secrets.OWNER_ID }}

      # тайминги
      WINDOW_MIN: ${{ secrets.WINDOW_MIN }} # например: 30
      LAG_MIN: ${{ secrets.LAG_MIN }} # например: 10
      MISS_GRACE_MIN: ${{ secrets.MISS_GRACE_MIN }} # например: 15
      REPORT_HOUR: ${{ secrets.REPORT_HOUR }} # например: 21
      ANTI_DUP_MIN: ${{ secrets.ANTI_DUP_MIN }} # например: 45
      MAX_PER_RUN: ${{ secrets.MAX_PER_RUN }} # например: 1
      NOTIFY_MODE: ${{ secrets.NOTIFY_MODE }} # post_only | all | silent

      # если канал-комментарии привязан — публикуем ровно в канал:
      SENDER_CHAT_ID: ${{ secrets.CHANNEL_ID }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Run cron poster (verbose)
        run: |
          set -e
          node --unhandled-rejections=strict --trace-uncaught scripts/cron_poster.js

      # (!) Надёжный пуш sent.json — без условий, с rebase и повторной попыткой
      - name: Commit & push sent.json (robust)
        run: |
          set -e
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          BRANCH="$(git rev-parse --abbrev-ref HEAD)"
          if git diff --quiet -- sent.json; then
            echo "Nothing to commit"
            exit 0
          fi
          git add sent.json
          git commit -m "chore: update sent.json (auto)"
          git pull --rebase origin "$BRANCH" || true
          git push origin "$BRANCH" || (git pull --rebase origin "$BRANCH" && git push origin "$BRANCH")
